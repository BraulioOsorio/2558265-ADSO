/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package principal;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.awt.Color;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author INSTRUCTOR
 */
public final class ListaTi extends javax.swing.JPanel {

    /**
     * Creates new form ListaParqueaderos
     */
    String idP;
    DefaultTableModel modelo;
    Gson gson = new Gson();
    ConsumoAPI conexion = new ConsumoAPI();
    public ListaTi(String idP) {
        this.idP = idP;
        initComponents();
        modelo = (DefaultTableModel) Tickets.getModel();
        llenarTabla();
        ini();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        etq_titulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tickets = new javax.swing.JTable();
        btn_buscar = new javax.swing.JButton();
        campo_placa = new javax.swing.JTextField();
        btn_restablecer = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        etq_titulo.setFont(new java.awt.Font("SansSerif", 0, 36)); // NOI18N
        etq_titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etq_titulo.setText("Historico");
        etq_titulo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(49, 138, 222)));

        Tickets.setAutoCreateRowSorter(true);
        Tickets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Placa", "Estado Pago", "Total Pagado", "Hr Ingreso", "Hr Salida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tickets.setEnabled(false);
        Tickets.setGridColor(new java.awt.Color(49, 138, 222));
        Tickets.setRequestFocusEnabled(false);
        Tickets.setRowHeight(25);
        Tickets.setUpdateSelectionOnSort(false);
        Tickets.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(Tickets);
        if (Tickets.getColumnModel().getColumnCount() > 0) {
            Tickets.getColumnModel().getColumn(0).setResizable(false);
            Tickets.getColumnModel().getColumn(0).setPreferredWidth(10);
            Tickets.getColumnModel().getColumn(1).setResizable(false);
            Tickets.getColumnModel().getColumn(2).setResizable(false);
            Tickets.getColumnModel().getColumn(2).setPreferredWidth(10);
            Tickets.getColumnModel().getColumn(3).setResizable(false);
            Tickets.getColumnModel().getColumn(3).setPreferredWidth(25);
            Tickets.getColumnModel().getColumn(4).setResizable(false);
            Tickets.getColumnModel().getColumn(4).setPreferredWidth(25);
        }

        btn_buscar.setBackground(Color.decode("#318ade"));
        btn_buscar.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        btn_buscar.setForeground(new java.awt.Color(255, 255, 255));
        btn_buscar.setText("BUSCAR");
        btn_buscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_buscar.setFocusable(false);
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        campo_placa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campo_placaActionPerformed(evt);
            }
        });
        campo_placa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campo_placaKeyPressed(evt);
            }
        });

        btn_restablecer.setBackground(new java.awt.Color(255, 102, 102));
        btn_restablecer.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_restablecer.setForeground(new java.awt.Color(255, 255, 255));
        btn_restablecer.setText("X");
        btn_restablecer.setBorder(null);
        btn_restablecer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_restablecer.setFocusable(false);
        btn_restablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_restablecerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(etq_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(campo_placa, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_buscar)
                        .addGap(18, 18, 18)
                        .addComponent(btn_restablecer, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(etq_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campo_placa, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_restablecer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        buscarParqueadero();
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void campo_placaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campo_placaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campo_placaActionPerformed

    private void campo_placaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campo_placaKeyPressed
        if (evt.getKeyChar() == '\n') {
            System.out.println("Se presiono enter y buscar el parqueadero");
            buscarParqueadero();
        }
    }//GEN-LAST:event_campo_placaKeyPressed

    private void btn_restablecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_restablecerActionPerformed
        llenarTabla();
    }//GEN-LAST:event_btn_restablecerActionPerformed
    public void ini(){
        JTableHeader header = Tickets.getTableHeader();
        header.setBackground(new Color(49, 138, 222)); 
        header.setForeground(Color.WHITE);
    }
    private void llenarTabla() {
        try {
            Map<String, String> data = new HashMap<>();
            data.put("idP", idP);
            String response = conexion.ConsumoGET("http://localhost/APIparqueadero/tickets/getTi.php",data);

            JsonArray registros = gson.fromJson(response, JsonArray.class);
            

            //JsonArray registros = jsonObject.getAsJsonArray("registros");
            //!registros.isEmpty()
            //registros.size() > 0
            if (registros.size() > 0) {

                modelo.setNumRows(0);

                for (JsonElement registro : registros) {
                    JsonObject registrosOb = registro.getAsJsonObject();

                    String placaObtenida = registrosOb.get("placa").getAsString();
                    String estado = registrosOb.get("estado_pago").getAsString();
                    if (estado.equals("0")) {
                        estado = "PENDIENTE";
                    } else {
                        estado = "PAGADO";
                    }

                    // Manejo de "total_pago" nulo
                    JsonElement totalPagoElement = registrosOb.get("total_pago");
                    String pagado = (totalPagoElement != null && !totalPagoElement.isJsonNull()) ? formatoMoneda(totalPagoElement.getAsString()) : "PENDIENTE";

                    String horaI = registrosOb.get("hora_ingreso").getAsString();

                    // Manejo de "hora_salida" nulo
                    JsonElement horaSalidaElement = registrosOb.get("hora_salida");
                    String horaS = (horaSalidaElement != null && !horaSalidaElement.isJsonNull()) ? horaSalidaElement.getAsString() : "00:00:00";

                    Object[] temporal = new Object[]{placaObtenida, estado, pagado, horaI, horaS};
                    modelo.addRow(temporal);

                    centrarTextTabla();
                }

            } else {

            }

        } catch (Exception e) {
            System.out.println("error al obtener el parqueadero "+e.toString());
        }
    }
    
    private void buscarParqueadero() {


        String placa = campo_placa.getText();

        Map<String, String> dataPost = new HashMap<>();
        dataPost.put("placa", placa);
        dataPost.put("idP", idP);
        try {
            String response = conexion.consumoPOST("http://localhost/APIparqueadero/tickets/findTi.php", dataPost);
     
            JsonArray registros = gson.fromJson(response, JsonArray.class);
            

            //JsonArray registros = jsonObject.getAsJsonArray("registros");
            //!registros.isEmpty()
            //registros.size() > 0
            if (registros.size() > 0) {

                modelo.setNumRows(0);

                for (JsonElement registro : registros) {
                    JsonObject registrosOb = registro.getAsJsonObject();

                    String placaObtenida = registrosOb.get("placa").getAsString();
                    String estado = registrosOb.get("estado_pago").getAsString();
                    if (estado.equals("0")) {
                        estado = "PENDIENTE";
                    } else {
                        estado = "PAGADO";
                    }

                    // Manejo de "total_pago" nulo
                    JsonElement totalPagoElement = registrosOb.get("total_pago");
                    String pagado = (totalPagoElement != null && !totalPagoElement.isJsonNull()) ? formatoMoneda(totalPagoElement.getAsString()) : "PENDIENTE";

                    String horaI = registrosOb.get("hora_ingreso").getAsString();

                    // Manejo de "hora_salida" nulo
                    JsonElement horaSalidaElement = registrosOb.get("hora_salida");
                    String horaS = (horaSalidaElement != null && !horaSalidaElement.isJsonNull()) ? horaSalidaElement.getAsString() : "00:00:00";

                    Object[] temporal = new Object[]{placaObtenida, estado, pagado, horaI, horaS};
                    modelo.addRow(temporal);

                    centrarTextTabla();
                }

            } else {
                JOptionPane.showMessageDialog(null, "No se encontraron resultados");
                llenarTabla();
            }
        } catch (Exception e) {


            System.out.println("error al obtener el vehiculo"+ e);
        }
        campo_placa.setText("");
    }
    
    private void centrarTextTabla() {
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int i = 0; i < Tickets.getColumnCount(); i++) {
            Tickets.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        Tickets.repaint();
        
        
    }
    
    
    public static String formatoMoneda(String numeroString) {
        try {
            // Parsea el valor de la cadena a float
            float numero = Float.parseFloat(numeroString);

            DecimalFormatSymbols symbols = new DecimalFormatSymbols();
            symbols.setGroupingSeparator('.');
            symbols.setDecimalSeparator(',');
            String pattern = "###,###,###,###.##"; // Patrón para el formato de moneda colombiana

            DecimalFormat decimalFormat = new DecimalFormat(pattern, symbols);
            return decimalFormat.format(numero);
        } catch (NumberFormatException e) {
            // Manejo de excepciones en caso de que la cadena no sea un número válido
            return "Formato no válido";
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tickets;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_restablecer;
    private javax.swing.JTextField campo_placa;
    private javax.swing.JLabel etq_titulo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
